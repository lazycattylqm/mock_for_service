// Code generated by MockGen. DO NOT EDIT.
// Source: greet.pb.micro.go

// Package mock_greeter is a generated GoMock package.
package mock_greeter

import (
	context "context"
	reflect "reflect"

	client "github.com/asim/go-micro/v3/client"
	gomock "github.com/golang/mock/gomock"
	greeter "liqiming.com.greeter/proto"
)

// MockGreeterService is a mock_greeter of GreeterService interface.
type MockGreeterService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServiceMockRecorder
}

// MockGreeterServiceMockRecorder is the mock_greeter recorder for MockGreeterService.
type MockGreeterServiceMockRecorder struct {
	mock *MockGreeterService
}

// NewMockGreeterService creates a new mock_greeter instance.
func NewMockGreeterService(ctrl *gomock.Controller) *MockGreeterService {
	mock := &MockGreeterService{ctrl: ctrl}
	mock.recorder = &MockGreeterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterService) EXPECT() *MockGreeterServiceMockRecorder {
	return m.recorder
}

// SayHi mocks base method.
func (m *MockGreeterService) SayHi(ctx context.Context, in *greeter.FromReq, opts ...client.CallOption) (*greeter.ResMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHi", varargs...)
	ret0, _ := ret[0].(*greeter.ResMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterServiceMockRecorder) SayHi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterService)(nil).SayHi), varargs...)
}

// MockGreeterHandler is a mock_greeter of GreeterHandler interface.
type MockGreeterHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterHandlerMockRecorder
}

// MockGreeterHandlerMockRecorder is the mock_greeter recorder for MockGreeterHandler.
type MockGreeterHandlerMockRecorder struct {
	mock *MockGreeterHandler
}

// NewMockGreeterHandler creates a new mock_greeter instance.
func NewMockGreeterHandler(ctrl *gomock.Controller) *MockGreeterHandler {
	mock := &MockGreeterHandler{ctrl: ctrl}
	mock.recorder = &MockGreeterHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterHandler) EXPECT() *MockGreeterHandlerMockRecorder {
	return m.recorder
}

// SayHi mocks base method.
func (m *MockGreeterHandler) SayHi(arg0 context.Context, arg1 *greeter.FromReq, arg2 *greeter.ResMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHi", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SayHi indicates an expected call of SayHi.
func (mr *MockGreeterHandlerMockRecorder) SayHi(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHi", reflect.TypeOf((*MockGreeterHandler)(nil).SayHi), arg0, arg1, arg2)
}
